package com.adobe.flash.samples{	import flash.media.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.SampleDataEvent;	import flash.utils.ByteArray;		/**	* Used in the Adobe Dynamic Sound quick start example applications.	*	* The class includes a play() function, which plays a sound and adjusts	* its pitch (frequency) by a factor of 1.0 to 2.0.	*/	public class SineWave extends EventDispatcher	{		private var soundChannel:SoundChannel;	// Used to stop the sound.		private var bytes:ByteArray;			// Used to store the audio sample bytes used by the output Sound object.		public var frequency:Number;		// The factor (from 1.0 to 2.0) to shift the sound pitch.				var SAMPLE_RATE = 44100;		var SINE_COEFFICIENT = (Math.PI * 2);				var counter = 0;		var vol:Number = 1.0;				/**		* The constructor function. 		*/		public function SineWave()		{		}		/**		* Plays audio based on a source Sound object (srcSound) with the pitch adjusted by a specified 		* factor (pitchShiftFactor). The sampleData event handler for the output Sound object (morphedSound) 		* generates audio sample data used by the Sound object. By setting the position to 0, the 		* code will extract audio data from the beginning of the sound on each call to the play() method.		*/		private function convertMidiNoteNumberToFrequency(noteNumber:uint):Number		{			return (440*( Math.pow(2, ((noteNumber-69)/12))));		}				public function play(noteNumber:Number):void		{			this.frequency = convertMidiNoteNumberToFrequency(noteNumber);			counter = 0;			vol = 0.5;						var morphedSound:Sound = new Sound();			morphedSound.addEventListener(SampleDataEvent.SAMPLE_DATA, sampleDataHandler);			soundChannel = morphedSound.play();			soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);		}		/**		* Stops the sound, and notifies the host application that the sound is done playing.		*/		public function stop():void		{			if((soundChannel != null) && (typeof(soundChannel) != 'undefined'))				soundChannel.stop();			dispatchEvent(new Event(Event.SOUND_COMPLETE));		}		/**		* Notifies the host application that the sound is done playing.		*/		private function soundCompleteHandler(event:Event):void		{			dispatchEvent(event);		}		/**		* Provides sample data to the output Sound object. The Sound object dispatches a 		* sampleData event when it needs sample data. This event handler function provides		* that data. The method calls the shiftBytes() method to shift the pitch of the 		* audio data.		*/		private function sampleDataHandler(event:SampleDataEvent):void		{			for(var i:int = 0; i < 4096; i++)			{				vol = (counter > SAMPLE_RATE) ? 0 : 1 - (counter / 88200);				vol *= 0.5;				var sample:Number = vol * Math.sin( ((counter + i) / (SAMPLE_RATE/this.frequency)) * Math.PI * 2);				event.data.writeFloat(sample); // left				event.data.writeFloat(sample); // right			}			counter += 4096;		}	}}